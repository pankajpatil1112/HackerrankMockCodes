import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {

	/*
    class Node 
    	int data;
    	Node left;
    	Node right;
	*/
	public static int height(Node root) {
      	// Write your code here.
          /*Below code find Height with recursion*/
        //   int rightH = 0;
        //   int leftH = 0;
        //   if(root.left == null && root.right == null)
        //   return 0;
        //   else{
        //      if(root.left != null)
        //      leftH = height(root.left);
        //      if(root.right != null)
        //      rightH = height(root.right);
        //   }
        //   int max;
        //   if(leftH > rightH){
        //       max = leftH;
        //   }else{
        //       max = rightH;
        //   }
        //   return max+1;
        /*below code find height without recursion using queue*/
       Queue<Node> q = new LinkedList<Node>();
       int height = -1;
       q.add(root);
       q.add(null);
       while(!q.isEmpty()){
          Node temp = q.remove();
          if(temp == null){
              if(!q.isEmpty())
              q.add(null);
              height++;
          }else{
              if(temp.left != null)
              q.add(temp.left);
              if(temp.right != null)
              q.add(temp.right);
          }
       }
       return height;
    }

	public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        int height = height(root);
        System.out.println(height);
    }	
}